Newsqueak2
'Saber'

class SaberView platform: p parent: theParentView= (
"The unit for modelling a server-generated UI in Saber

Copyright 2009 Jeff Olson

Licensed under the Apache License, Version 2.0 (the 'License'); you may not use this file except in compliance with the License. You may obtain a copy of the License at 

    http://www.apache.org/licenses/LICENSE-2.0 

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. 
"
|	
	Error = p Error.
	Dictionary = p Dictionary.
	theModel= nil.
	theParent = theParentView.
|
)
('as yet unclassified'
blockNamesFrom: markup = (
	^ {}
)

content = (
	subclassResponsibility
)

defineRawMarkup: block = (
	^ block value.
)

getBlockFrom: markup named: blockName = (
	^ ''
)

getGetModelValueKeyFrom: aStream = (
	| result curr |
	result:: String new writeStream.

	[aStream atEnd or: [(curr:: aStream next) == $}]]
		whileFalse: [
			result nextPut: curr
		].

	^ result contents withBlanksTrimmed
)

integrate: childMarkup model: aModel = (
	| finalMarkup integratedMarkup thisMarkup |
	thisMarkup:: resolveMarkup: content withModel: aModel.
	integratedMarkup:: merge: childMarkup into: thisMarkup.

	finalMarkup:: parent = nil ifTrue: [ integratedMarkup. ]
		ifFalse: [ parent integrate: integratedMarkup model: aModel ].

	^ finalMarkup
)

merge: childMarkup into: parentMarkup = (
	| finalMarkup blockTexts childBlock|
	finalMarkup:: parentMarkup.
	(blockNamesFrom: parentMarkup) do: [ :blockName |
		childBlock:: getBlockFrom: childMarkup named: blockName.
		finalMarkup:: childBlock = nil ifFalse: [ replaceBlocksNamed: blockName in: finalMarkup with: childBlock].
	].
	^ finalMarkup.
)

model = (
	theModel = nil ifTrue: [ theModel:: Dictionary new. ].
	^ theModel.
)

parent = (
	^ theParent
)

render = (
	^ renderWith: model
)

renderWith: aModel = (
	| thisMarkup finalMarkup |
	thisMarkup:: resolveMarkup: content withModel: aModel.
	
	
	finalMarkup:: parent = nil ifTrue: [ thisMarkup. ]
		ifFalse: [
			parent integrate: thisMarkup model: aModel.
		].

	^ finalMarkup
)

replaceBlocksNamed: blockName in: markup with: newBlock = (
	^ ''
)

resolveMarkup: rawMarkup withModel: model = (
	| result stream |
	result:: String new writeStream.
	stream:: rawMarkup readStream.

	[stream atEnd]
		whileFalse: [| currentChar | 
			currentChar:: stream next.
			currentChar == ${
				ifTrue: [| key | 
					key:: getGetModelValueKeyFrom: stream.
					result nextPutAll: (model at: key ifAbsent: [ (Error new messageText: ('model does not contain key "', key, '" in view "',class name asString,'"')) signal ]).
				]
				ifFalse: [
					currentChar == $\
						ifTrue: [stream atEnd
								ifFalse: [result nextPut: stream next]]
						ifFalse: [result nextPut: currentChar]]].

	^ result contents
)

)