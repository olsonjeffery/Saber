Newsqueak2
'Saber'

class SaberView platform: p parent: theParentView= (
"The unit for modelling a server-generated UI in Saber

Copyright 2009 Jeff Olson

Licensed under the Apache License, Version 2.0 (the 'License'); you may not use this file except in compliance with the License. You may obtain a copy of the License at 

    http://www.apache.org/licenses/LICENSE-2.0 

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. 
"
|	
	Error = p Error.
	Dictionary = p Dictionary.
	OrderedCollection = p OrderedCollection.
	theModel= nil.
	theParent = theParentView.
|
)
('as yet unclassified'
blockNamesFrom: markup = (
	| names stream blockName|
	names:: OrderedCollection new.
	stream:: markup readStream.

	[stream atEnd]
		whileFalse: [| currentChar | 
			currentChar:: stream next.
			currentChar == $<
				ifTrue: [| key | 
					currentChar:: stream next.
					currentChar == $% ifTrue: [
						lookForBlockNameIn: (getCharactersInStream: stream upTo: $%) toAddTo: names
				].
			].
		].		
	^ names.
)

content = (
	subclassResponsibility
)

defineRawMarkup: block = (
	^ block value.
)

getBlockFrom: markup named: blockName = (
	| indices result |
	indices:: getIndicesForBlockNamed: blockName from: markup.
	( indices = { 0. 0} ) ifFalse: [
		result:: markup copyFrom: (indices at: 1) to: (indices at: 2).
	]
		ifTrue: [
		result:: nil.
	].
	^ result.
)

getCharactersInStream: stream upTo: char = (
	| result curr |
	result:: String new writeStream.

	[stream atEnd or: [(curr:: stream next) == char]]
		whileFalse: [
			result nextPut: curr
		].

	^ result contents withBlanksTrimmed
)

getGetModelValueKeyFrom: aStream = (
	^ getCharactersInStream: aStream upTo: $}.
)

getIndicesForBlockNamed: blockName from: markup = (
	| start end stream foundEnd |
	foundEnd:: false.
	start:: 0.
	end:: 0.
	stream:: markup readStream.
	[stream atEnd] whileFalse: [ | currChar |
		[ foundEnd = false ] whileTrue: [
		currChar:: stream next.
		( currChar = $< ) ifTrue: [
			currChar:: stream next.
			( currChar = $% ) ifTrue: [ | thisBlockName |
				( start = 0) ifTrue: [ 
					thisBlockName:: lookForBlockNameIn: (getCharactersInStream: stream upTo: $%).
					(thisBlockName = blockName) ifTrue: [
						currChar:: stream next.
						currChar:: stream next.
						start:: stream position.	
					]
				]
					ifFalse: [ | endTemp |
						endTemp:: ((stream position) - 2).
						((textIsEndBlock: (getCharactersInStream: stream upTo: $%)) = true) ifTrue: [
							end:: endTemp.
							foundEnd:: true.
					]
				]
			]
		].
		(stream atEnd) ifTrue: [ foundEnd:: true ]
	].
		(foundEnd) ifTrue: [ stream next. ]
	].
	^ { start. end. }
)

integrate: childMarkup into: parentMarkup withModel: aModel = (
	| finalMarkup integratedMarkup thisMarkup |
	thisMarkup:: parentMarkup.
	integratedMarkup:: merge: childMarkup into: thisMarkup.

	finalMarkup:: parent = nil ifTrue: [ stripBlockTagsFrom: integratedMarkup. ]
		ifFalse: [ parent integrate: integratedMarkup model: aModel ].

	^ finalMarkup
)

integrate: childMarkup model: aModel = (
	| thisMarkup |
	thisMarkup:: resolveMarkup: content withModel: aModel.
	^ integrate: childMarkup into: thisMarkup withModel: aModel.
)

lookForBlockNameIn: text = (
	| blockName blockOpener blockClose |
	blockName:: nil.
	blockOpener:: (text asLowercase findString: 'block ' startingAt: 1) = 1.
	blockOpener ifTrue: [blockName:: text copyFrom: 7 to: text size]
		ifFalse: [(textIsEndBlock: text)
					ifFalse: [(Error new messageText: 'invalid block: "',text,'"') signal]].
	^ blockName.
)

lookForBlockNameIn: text toAddTo: names = (
	| blockName |
	blockName:: lookForBlockNameIn: text.
	blockName = nil ifFalse: [names add: blockName]
)

merge: childMarkup into: parentMarkup = (
	| finalMarkup blockTexts childBlock childBlockNames |
	childBlockNames:: blockNamesFrom: childMarkup.
	finalMarkup:: parentMarkup.
	(blockNamesFrom: parentMarkup) do: [ :blockName |
		(childBlockNames contains: [ :i | i = blockName ]) ifTrue: [
			childBlock:: getBlockFrom: childMarkup named: blockName.
			finalMarkup:: childBlock = nil ifFalse: [ replaceBlocksNamed: blockName in: finalMarkup with: childBlock].
		]
	].
	^ finalMarkup.
)

model = (
	theModel = nil ifTrue: [ theModel:: Dictionary new. ].
	^ theModel.
)

parent = (
	^ theParent
)

render = (
	^ renderWith: model
)

renderWith: aModel = (
	| thisMarkup finalMarkup |
	thisMarkup:: resolveMarkup: content withModel: aModel.
	
	
	finalMarkup:: parent = nil ifTrue: [ thisMarkup. ]
		ifFalse: [
			parent integrate: thisMarkup model: aModel.
		].

	^ finalMarkup
)

replaceBlocksNamed: blockName in: markup with: newBlock = (
	| indices integrated |
	indices:: getIndicesForBlockNamed: blockName from: markup.
	integrated:: markup copyReplaceFrom: (indices at: 1) to: (indices at: 2) with: newBlock.
	^integrated
)

resolveMarkup: rawMarkup withModel: aModel = (
	| result stream |
	result:: String new writeStream.
	stream:: rawMarkup readStream.

	[stream atEnd]
		whileFalse: [| currentChar | 
			currentChar:: stream next.
			currentChar == ${
				ifTrue: [| key | 
					key:: getGetModelValueKeyFrom: stream.
					result nextPutAll: (aModel at: key ifAbsent: [ (Error new messageText: ('model does not contain key "', key, '" in view "',class name asString,'"')) signal ]).
				]
				ifFalse: [
					currentChar == $\
						ifTrue: [stream atEnd
								ifFalse: [result nextPut: stream next]]
						ifFalse: [result nextPut: currentChar]]].

	^ result contents
)

stripBlockTagsFrom: markup = (
	| stream finalMarkup indicesCollection newSize origSize offset |
	indicesCollection:: OrderedCollection new.
	finalMarkup:: markup.
	
	stream:: markup readStream.
	[stream atEnd] whileFalse: [ | currChar |
		currChar:: stream next.
		( currChar = $< ) ifTrue: [
			currChar:: stream next.
			( currChar = $% ) ifTrue: [ | start end doneYet |
				start:: ((stream position) - 1).
				end:: 0.
				doneYet:: (stream atEnd).
				[ doneYet ] whileFalse: [
					currChar:: stream next.
					
					(currChar = $%) ifTrue: [
						currChar:: stream next.
						(currChar = $>) ifTrue: [
							end:: (stream position).
							doneYet:: true.
						]
					].
					
					(doneYet = false) ifTrue: [ doneYet:: (stream atEnd) ]
				].
				(end = 0) ifTrue: [ Error new messageText: 'unclosed block when resolving view in "', (class name asString), '"' ].
				indicesCollection add: { start. end. }
			]
		]
	].
	
	newSize:: finalMarkup size.
	origSize:: newSize.
	indicesCollection do: [ :indices | 
		offset:: (origSize - newSize).
		finalMarkup:: finalMarkup copyReplaceFrom: ((indices at: 1) - offset) to: ((indices at: 2) - offset) with: ''.
		newSize:: finalMarkup size.
	].

	
	^ finalMarkup
)

textIsEndBlock: text = (
	^ (text asLowercase findString: 'endblock' startingAt: 1) = 1.
)

)