Newsqueak2
'Saber'

class SaberExampleSite usingPlatform: p = (
"
Quick start: Saber withSite: (SaberExampleSite usingPlatform: Platform new)

Copyright 2009 Jeff Olson

Licensed under the Apache License, Version 2.0 (the 'License'); you may not use this file except in compliance with the License. You may obtain a copy of the License at 

    http://www.apache.org/licenses/LICENSE-2.0 

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. 
"
|
	platform = p.
	HttpResponse = p HttpResponse.
	NS2Reflection = p NS2Reflection.
	SaberHandler = p SaberHandler.
	FileDirectory = p FileDirectory.
	
	port = nil.
	name = nil.
	SaberNotFoundHandler = p SaberNotFoundHandler.
	SaberParameterHandler = p SaberParameterHandler.
	SaberStaticFileHandler = p SaberStaticFileHandler.
	SaberView = p SaberView.
	Dictionary = p Dictionary.
|
port:: 8083.
name:: 'TestSite1'.
)
(

class Domain = (
"Describe the class in this comment."
|
|
)
(

class FooService = (
"Describe the class in this comment."
|
|
)
('as yet unclassified'
getThing = (
	^ 'Hello world from FooService!'
)

))

class Views = (
"container for all of the Views in SaberExampleSite"
|
|
)
(

class MainBase platform: p parent: theP = SaberView platform: p parent: theP (
|
|
)
('as yet unclassified'
content = (
	^ '
<html>
	<head>
		<title><% block title %>SaberExampleSite<% endblock %></title>
	</head>
	<body>
		<% block content %>example content<% endblock %>
	</body>
</html>
	'
)

)

class FooView platform: plat parent: theP = SaberView platform: platform parent: theP (
|
|
)
('as yet unclassified'
content = (
	^ '<% block title %>Foo, boyeee!<% endblock %>
	<% block content %>Hello world from /foo! { thingy }<% endblock %>
'
)

)

class SiteRootView platform: p parent: theP = SaberView platform: p parent: theP(|
|
)
('as yet unclassified'
content = (
	^ defineRawMarkup: [
	'
<% block title %>SiteRoot view, woot! <% endblock %>
<% block content %> { content } <% endblock %>
	'
	].
)

)

class NameShowView platform: plat parent: theP = SaberView platform: plat parent: theP (
|
|
)
('as yet unclassified'
content = (
	^ '
<% block title %>Hello, {nameParam}<% endblock %>
<% block content %>Hi, {nameParam}. How is {wife}?<% endblock %>
'
)

))

class SiteRoot = SaberHandler(
"Describe the class in this comment."
|
|
)
(

class static = SaberStaticFileHandler (
|
|
)
('as yet unclassified'
documentRoot = (
	^ (FileDirectory default fullName, FileDirectory slash, 'static')
)

)

class foo = SaberHandler(
"/foo"
|
|
)
('as yet unclassified'
getView = (
	| parent |
	parent:: Views new MainBase platform: platform parent: nil.
	^ Views new FooView platform: platform parent: parent.
)

onGet: request = (
	| fooService view |
	view:: getView.
	fooService:: Domain new FooService new.
	view model at: 'thingy' put: fooService getThing.
	^ HttpResponse fromString: view render.
)

)

class bar = SaberHandler (
"/bar"
|
|
)
(

class nameParam = SaberParameterHandler (
"/bar/{nameParam}"
|
|
)
(

class show = SaberHandler(
"/bar/{nameParam}/show"
|
|
)
('as yet unclassified'
getView = (
	| parent view |
	parent:: Views new MainBase platform: platform parent: nil.
	^ Views new NameShowView platform: platform parent: parent.
)

onGet: request = (
	| wife view |
	wife:: request getFields at: 'wife' ifAbsent: [ 'your sister' ].
	view:: getView.
	view model at: 'nameParam' put: (request getFields at: 'nameParam').
	view model at: 'wife' put: wife.
	^ HttpResponse fromString: view render.
)

))

class baz = SaberHandler (
"/bar/baz -- no overriden method handlers."
|
|
)
())

class NotFound = SaberNotFoundHandler(
|
|
)
('as yet unclassified'
onGet: request = (
	^ HttpResponse fromString: ('route: "', request url, '" was not found.')
)

)'as yet unclassified'
getView = (
	| base |
	base:: (Views new MainBase platform: platform parent: nil). 
	^ Views new SiteRootView platform: platform parent: base.
)

onGet: request = (
	| view |
	view:: getView.
	view model at: 'content' put: 'This is a handler that matches a request to the root of SaberExampleSite'.
	^HttpResponse fromString: view render.
)

))